{"version":3,"sources":["Card.js","GuessCount.js","HallOfFame.js","HighScoreInput.js","App.js","serviceWorker.js","index.js"],"names":["Card","_ref","card","feedback","index","onClick","react_default","a","createElement","className","concat","GuessCount","guesses","HallOfFame","entries","map","_ref2","date","id","player","key","HOF_KEY","HOF_MAX_SIZE","HighScoreInput","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleWinnerUpdate","event","setState","winner","target","value","toUpperCase","persistWinner","preventDefault","entry","onStored","Date","toLocaleDateString","now","JSON","parse","localStorage","getItem","insertionPoint","findIndex","_ref3","push","splice","length","setItem","stringify","saveHOFEntry","state","onSubmit","type","autoComplete","onChange","Component","SYMBOLS","App","handleCardClick","currentPair","handleNewPairClosedBy","displayHallOfFame","hallOfFame","cards","generateCards","matchedCardIndices","result","candidates","shuffle","SIDE","pop","_this2","_this$state","newPair","newGuesses","matched","toConsumableArray","setTimeout","_this$state2","indexMatched","includes","_this3","_this$state3","won","src_GuessCount_0","src_Card_0","getFeedbackForCard","src_HallOfFame_0","src_HighScoreInput_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b18dbac3.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Card.css';\n\nconst HIDDEN_SYMBOL = '❓';\n\nconst Card = ({ card, feedback, index, onClick }) => {\n  return (\n    <div className={`card ${feedback}`} onClick={() => onClick(index)}>\n      <span className=\"symbol\">\n        {feedback === \"hidden\" ? HIDDEN_SYMBOL : card}\n      </span>\n    </div>\n  );\n}\n\nCard.propTypes = {\n  card: PropTypes.string.isRequired,\n  feedback: PropTypes.oneOf([\n    \"hidden\",\n    \"justMatched\",\n    \"justMismatched\",\n    \"visible\"\n  ]).isRequired,\n  index: PropTypes.number.isRequired,\n  onClick: PropTypes.func.isRequired\n}\n\nexport default Card;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './GuessCount.css';\n\nconst GuessCount = ({ guesses }) => {\n  return <div className=\"guesses\">Number of attempts: <em>{guesses}</em></div>;\n}\n\nGuessCount.propTypes = {\n  guesses: PropTypes.number.isRequired\n}\n\nexport default GuessCount;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './HallOfFame.css';\n\nconst HallOfFame = ({ entries }) => {\n  return (\n    <table className=\"hallOfFame\">\n      <tbody>\n        {\n          entries.map(({ date, guesses, id, player }) => (\n            <tr key={id}>\n              <td className=\"date\">{date}</td>\n              <td className=\"guesses\">{guesses}</td>\n              <td className=\"player\">{player}</td>\n            </tr>\n          ))\n        }\n      </tbody>\n    </table>\n  );\n}\n\nHallOfFame.propTypes = {\n  entries: PropTypes.arrayOf(\n    PropTypes.shape({\n      date: PropTypes.string.isRequired,\n      guesses: PropTypes.number.isRequired,\n      id: PropTypes.number.isRequired,\n      player: PropTypes.string.isRequired\n    })\n  ).isRequired\n}\n\nexport default HallOfFame;\n\n// == Internal helpers ==============================================\n\nconst HOF_KEY = '::Memory::HallofFame';\nconst HOF_MAX_SIZE = 10;\n\nexport function saveHOFEntry(entry, onStored) {\n  entry.date = new Date().toLocaleDateString();\n  entry.id = Date.now();\n\n  const entries = JSON.parse(localStorage.getItem(HOF_KEY) || '[]');\n  const insertionPoint = entries.findIndex(\n    ({ guesses }) => guesses >= entry.guesses\n  );\n\n  if (insertionPoint === -1) {\n    entries.push(entry);\n  } else {\n    entries.splice(insertionPoint, 0, entry);\n  }\n  if (entries.length > HOF_MAX_SIZE) {\n    entries.splice(HOF_MAX_SIZE, entries.length);\n  }\n\n  localStorage.setItem(HOF_KEY, JSON.stringify(entries));\n  onStored(entries);\n}\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\n\nimport './HighScoreInput.css';\n\nimport { saveHOFEntry } from './HallOfFame';\n\nclass HighScoreInput extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { winner: \"\" };\n  }\n\n  // Arrow function for binding\n  handleWinnerUpdate = (event) => {\n    this.setState({ winner: event.target.value.toUpperCase() });\n  }\n\n  // Arrow function for binding\n  persistWinner = (event) => {\n    event.preventDefault();\n    const newEntry = { guesses: this.props.guesses, player: this.state.winner };\n    saveHOFEntry(newEntry, this.props.onStored);\n  }\n\n  render() {\n    return (\n      <form className=\"highScoreInput\" onSubmit={this.persistWinner}>\n        <p>\n          <label>\n            Bravo ! Entre ton prénom :\n            <input\n              type=\"text\"\n              autoComplete=\"given-name\"\n              onChange={this.handleWinnerUpdate}\n              value={this.state.winner}\n            />\n          </label>\n          <button type=\"submit\">J’ai gagné !</button>\n        </p>\n      </form>\n    );\n  }\n}\n\nHighScoreInput.propTypes = {\n  guesses: PropTypes.number.isRequired,\n  onStored: PropTypes.func.isRequired\n}\n\nexport default HighScoreInput;\n","import React, { Component } from 'react';\nimport { shuffle } from 'lodash';\n\nimport './App.css';\n\nimport Card from './Card';\nimport GuessCount from './GuessCount';\nimport HallOfFame from './HallOfFame';\nimport HighScoreInput from './HighScoreInput';\n\nconst SIDE = 6;\nexport const SYMBOLS = ['😀', '🎉', '💖', '🎩', '🐶', '🐱', '🦄', '🐬', '🌍', '🌛', '🌞', '💫', '🍎', '🍌', '🍓', '🍐', '🍟', '🍿'];\nconst VISUAL_PAUSE_MSECS = 750;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cards: this.generateCards(),\n      currentPair: [],\n      guesses: 0,\n      hallOfFame: null,\n      matchedCardIndices: []\n    };\n  }\n\n  generateCards() {\n    const result = [];\n    const size = SIDE * SIDE;\n    const candidates = shuffle(SYMBOLS);\n    while (result.length < size) {\n      const card = candidates.pop();\n      result.push(card, card);\n    }\n    return shuffle(result);\n  }\n\n  // Arrow function for binding\n  handleCardClick = (index) => {\n    const { currentPair } = this.state;\n\n    if (currentPair.length === 2) {\n      return;\n    }\n\n    if (currentPair.length === 0) {\n      this.setState({ currentPair: [index] });\n      return;\n    }\n\n    this.handleNewPairClosedBy(index);\n  }\n\n  handleNewPairClosedBy(index) {\n    const { cards, currentPair, guesses, matchedCardIndices } = this.state;\n    const newPair = [currentPair[0], index];\n    const newGuesses = guesses + 1;\n    const matched = cards[newPair[0]] === cards[newPair[1]];\n    this.setState({ currentPair: newPair, guesses: newGuesses });\n    if (matched) {\n      this.setState({ matchedCardIndices: [...matchedCardIndices, ...newPair] });\n    }\n    setTimeout(() => this.setState({ currentPair: [] }), VISUAL_PAUSE_MSECS);\n  }\n\n  getFeedbackForCard(index) {\n    const { currentPair, matchedCardIndices } = this.state;\n    const indexMatched = matchedCardIndices.includes(index);\n\n    if (currentPair.length < 2) {\n      return indexMatched || index === currentPair[0] ? 'visible' : 'hidden';\n    }\n\n    if (currentPair.includes(index)) {\n      return indexMatched ? 'justMatched' : 'justMismatched';\n    }\n\n    return indexMatched ? 'visible' : 'hidden';\n  }\n\n  // Arrow function for binding\n  displayHallOfFame = (hallOfFame) => {\n    this.setState({ hallOfFame });\n  }\n\n  render() {\n    const { cards, guesses, hallOfFame, matchedCardIndices } = this.state;\n    const won = matchedCardIndices.length === cards.length;\n    return (\n      <div className=\"memory\">\n        <GuessCount guesses={guesses} />\n        {\n          cards.map((card, index) => (\n          <Card\n            card={card}\n            feedback={this.getFeedbackForCard(index)}\n            index={index}\n            key={index}\n            onClick={this.handleCardClick}\n          />\n          ))\n        }\n        {\n          won &&\n            (hallOfFame ? (\n              <HallOfFame entries={hallOfFame} />\n            ) : (\n              <HighScoreInput guesses={guesses} onStored={this.displayHallOfFame} />\n            ))\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// OpenClassrooms:\n// import registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n// OpenClassrooms:\n// registerServiceWorker();\n"],"sourceRoot":""}